{"version":3,"sources":["components/profile/Profile.js","components/fullpage/fullpage.js","components/Text.js","components/hero-banner/HeroBanner.js","models/Dimensions.js","theme.js","App.js","serviceWorker.js","index.js"],"names":["Profile","useSpring","opacity","from","items","keys","item","key","transform","enter","leave","props","style","text","Fullpage","scrollingSpeed","sectionsColor","render","state","fullpageApi","Wrapper","className","Text","styled","p","layout","color","bannerHeight","height","window","innerHeight","__menus","id","url","map","section","href","toUpperCase","HeroBanner","apptheme","icon","size","fontSize","breakpoints","fontSizes","_fluidSystem","startingWidth","colors","white","black","oxblood","grain","tan","spaces","library","add","fab","faCheckSquare","faCoffee","faBars","App","theme","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.29f708ad.chunk.js","sourcesContent":["import React from 'react';\r\nimport {useSpring, animated, interpolate} from 'react-spring'\r\nimport { Transition } from 'react-spring/renderprops'\r\nimport './Profile.css';\r\n\r\nfunction Profile() {\r\n    const props = useSpring({\r\n        opacity: 1,\r\n        from: { opacity: 0 },\r\n      });\r\n\r\n      const items = [1,2,3];\r\n  return (\r\n    <div>\r\n        <Transition\r\n        items={items} keys={item => item.key}\r\n        from={{ transform: 'translate3d(0,-40px,0)' }}\r\n        enter={{ transform: 'translate3d(0,0px,0)' }}\r\n        leave={{ transform: 'translate3d(0,-40px,0)' }}>\r\n        {item => props => <div style={props}>{item.text}</div>}\r\n        </Transition>\r\n\r\n        <h1>PROFILE</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport ReactFullpage from '@fullpage/react-fullpage';\r\nimport Profile from '../profile/Profile'\r\n\r\nconst Fullpage = () => (\r\n    <ReactFullpage\r\n    //fullpage options\r\n    scrollingSpeed = {1000} /* Options here */\r\n    sectionsColor = {['transparent', '#f2f2f2', '#f2f2f2', 'f2f2f2', '#f2f2f2']}\r\n    render={({ state, fullpageApi }) => {\r\n      return (\r\n        <ReactFullpage.Wrapper>\r\n          <div className=\"section\">\r\n          </div>\r\n          <div className=\"section\">\r\n            <Profile />\r\n          </div>\r\n        </ReactFullpage.Wrapper>\r\n      );\r\n    }}\r\n  />\r\n);\r\n\r\nexport default Fullpage;","import styled from \"styled-components\";\r\nimport { layout , color } from \"styled-system\";\r\n\r\nconst Text = styled.p`\r\n  ${layout}\r\n  ${color}\r\n`;\r\n\r\nexport default Text;","import React from 'react';\r\nimport { __screenHeight } from '../../models/Dimensions'\r\nimport './HeroBanner.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport styled from \"styled-components\";\r\nimport Fullpage from \"../fullpage/fullpage\"\r\nimport Text from \"../Text\";\r\n\r\n/***** COMPONENTS  *****/\r\nimport Profile from '../profile/Profile'\r\n\r\nconst items = [{\r\n    key: '1',\r\n    text: '1'\r\n},\r\n{\r\n    key: '2',\r\n    text: '2'\r\n},\r\n{\r\n    key: '3',\r\n    text: '3'\r\n}];\r\n\r\nconst bannerHeight = {\r\n  height: __screenHeight()\r\n};\r\n\r\nconst sections = [\r\n  {  id: 'profile',\r\n     url: \"profile-sect\" }, \r\n  { id: 'experience',\r\n    url: \"exp-sect\" }, \r\n  { id: 'works',\r\n    url: \"work-sect\" },\r\n  { id: 'stacks',\r\n    url: \"stacks-sect\" },\r\n  { id: 'contact',\r\n    url: \"contact-sect\" }\r\n];\r\n\r\nconst __menus = sections.map((section) =>\r\n  <li key={section.id}>\r\n    <a href={'#' + section.url}>{section.id.toUpperCase()}</a>\r\n  </li>\r\n);\r\n\r\nconst HeroBanner = props => {\r\n  var theme = props.apptheme;\r\n\r\n  return (\r\n      <header className=\"App-header\" style={bannerHeight}>\r\n        <div className=\"row\">\r\n          <div className=\"main-content col-md-7\">\r\n          <Fullpage />\r\n            <div className=\"social-icons\">\r\n              <ul>\r\n                <li><a href=\"#\"><FontAwesomeIcon icon={['fab', 'facebook']} size=\"2x\"/></a></li>\r\n                <li><a href=\"#\"><FontAwesomeIcon icon={['fab', 'twitter']} size=\"2x\"/></a></li>\r\n                <li><a href=\"#\"><FontAwesomeIcon icon={['fab', 'github']} size=\"2x\"/></a></li>\r\n                <li><a href=\"#\"><FontAwesomeIcon icon={['fab', 'instagram']} size=\"2x\"/></a></li>              \r\n              </ul>\r\n            </div>\r\n          </div>\r\n          <div className=\"side-menu col-md-5\" style={bannerHeight}>\r\n            <div className=\"menu-nav text-left\">\r\n                <a href=\"#\" className=\"mobile-menu\">\r\n                  <FontAwesomeIcon icon=\"bars\" size=\"sm\" className=\"menu-bar-icon\" /><span>MENU</span>\r\n                </a>\r\n\r\n                <ul className=\"menu-list sm-scr\">\r\n                  { __menus }\r\n                </ul>\r\n            </div>\r\n              <div className=\"def-section\">\r\n                <dl className=\"name-def\">\r\n                  <rt>/jim-el/</rt>\r\n                  <dt><h1>gimel</h1></dt>\r\n                  <Text fontSize={[13,20]} color=\"#565656\">third alphabet character <br/>\r\n                      in Hebrew and the first <br/>\r\n                      name of a game changer</Text>\r\n                </dl>\r\n              </div>\r\n          </div>\r\n        </div>\r\n      </header>\r\n  );\r\n}\r\nexport default HeroBanner;\r\n","\r\n\r\nexport const __screenHeight = () => {\r\n    return window.innerHeight;\r\n}","export default {\r\n    breakpoints: [768, 1024],\r\n    fontSizes: ['13px', '16px', '19px', '23px', '27px', '33px', '39px', '47px'],\r\n    _fluidSystem: {\r\n      startingWidth: 320\r\n    },\r\n    colors: {\r\n      white: '#f7f7f7',\r\n      black: '#5656556',\r\n      oxblood: '#76323f',\r\n      grain: '#d7cec7',\r\n      tan:'c09f80'\r\n    },\r\n    spaces: [0, 2, 10, 15, 25, 30, 50]\r\n  };","import React from 'react';\r\nimport HeroBanner from './components/hero-banner/HeroBanner';\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { fab } from '@fortawesome/free-brands-svg-icons'\r\nimport { faCheckSquare, faCoffee, faBars } from '@fortawesome/free-solid-svg-icons';\r\nimport { ThemeProvider } from 'styled-components';\r\nimport theme from \"./theme\";\r\nimport './App.css';\r\n\r\nlibrary.add(fab, faCheckSquare, faCoffee, faBars);\r\n\r\nconst App = props => {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n    {\r\n      <div className=\"App\">\r\n        <HeroBanner apptheme={theme}/>\r\n      </div>\r\n    }\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}